syntax = "proto3";

option java_multiple_files = true;
option java_package = "net.honarnama";
option java_outer_classname = "HonarnamaProto";

package protobuf;

import "google/api/annotations.proto";

/// Commons /////////////////////////////////////////////////////////////////
message RequestProperties {
  uint64 ifNotMatchEtag = 1;
  string userAuthToken = 2;
  string clientId = 3;
  int32 clientVersion = 4;
  string userLanguage = 5;
  string userCountry = 6;
  int32 mcc = 7;
  int32 mnc = 8;
}

message ReplyProperties {
  enum StatusCode {
    OK = 0;
    NOT_MODIFIED = 1;
    CLIENT_ERROR = 2;
    SERVER_ERROR = 3;
    NOT_AUTHORIZED = 4;
  }
  StatusCode statusCode = 1;
  uint32 maxAgeMinutes = 2;
  uint64 etag = 3;
  string serverVersion = 4;
  string errorMessage = 5;
  string newUserAuthToken = 6;
}

message SimpleRequest {
  RequestProperties requestProperties = 1;
}

/// Meta --------------------------------------------------
message Location {
  uint32 id = 1;
  uint32 parentId = 2;
  string name = 3;
  uint32 order = 4;
  enum LocType {
    COUNTRY = 0;
    PROVINCE = 1;
    CITY = 2;
    NEIGHBORHOOD = 3;
  }
  LocType locType = 5;
}

message ArtCategory {
  uint32 id = 1;
  uint32 parentId = 2;
  string name = 3;
  uint32 order = 4;
  bool allSubCatFilterType = 5;
}

message EventCategory {
  uint32 id = 1;
  string name = 2;
  uint32 order = 3;
}

message LocationId {
  uint32 countryId = 1;
  uint32 provinceId = 2;
  uint32 cityId = 3;
  uint32 neighborhoodId = 4;
}

message ArtCategoryId {
  uint32 level1Id = 1;
  uint32 level2Id = 2;
}

/////////////////////////////////////////////////////////////////////////////
service MetaService {
  rpc Meta(SimpleRequest) returns (MetaReply) {
    option (google.api.http) = {
      get: "/v1/meta"
    };
  }
}

message MetaReply {
  ReplyProperties replyProperties = 1;
  repeated Location locations = 2;
  repeated int32 removedLocations = 3 [packed=true];
  repeated ArtCategory artCategories = 4;
  repeated int32 removedArtCategories = 5 [packed=true];
  repeated EventCategory eventCategories = 6;
  repeated int32 removedEventCategories = 7 [packed=true];
}

/////////////////////////////////////////////////////////////////////////////
service AuthService {
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountReply) {
    option (google.api.http) = {
      post: "/v1/accounts"
      body: "*"
    };
  }
}

message CreateAccountRequest {
  RequestProperties requestProperties = 1;
  string name = 2;
  string email = 3;
  string mobileNumber = 4;
  enum Gender {
    FEMALE = 0;
    MALE = 1;
    UNSPECIFIED = 2;
  }
  Gender gender = 5;
  enum ActivationMethod {
    EMAIL = 0;
    TELEGRAM = 1;
  }
  ActivationMethod activationMethod = 6;
}

message CreateAccountReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    INVALID_EMAIL = 1;
    DUPLICATE_EMAIL = 2;
    INVALID_MOBILE_NUMBER = 3;
    DUPLICATE_MOBILE_NUMBER = 4;
  }
  ErrorCode errorCode = 2;
  string telegramActivationCode = 3;
}

/////////////////////////////////////////////////////////////////////////////
service SellService {

  rpc PrepareToUploadPhoto(UploadPhotoRequest) returns (UploadPhotoReply) {
    option (google.api.http) = {
      post: "/v1/prepare-to-upload-photo"
      body: "*"
    };
  }

  rpc GetMyStore(SimpleRequest) returns (GetMyStoreReply) {
    option (google.api.http) = {
      get: "/v1/my-store"
    };
  }
  rpc CreateStore(CreateOrUpdateStoreRequest) returns (CreateOrUpdateStoreReply) {
    option (google.api.http) = {
      post: "/v1/stores"
      body: "*"
    };
  }
  rpc UpdateStore(CreateOrUpdateStoreRequest) returns (CreateOrUpdateStoreReply) {
    option (google.api.http) = {
      put: "/v1/store/{store.id}"
      body: "*"
    };
  }

  rpc GetItems(SimpleRequest) returns (GetItemsReply) {
    option (google.api.http) = {
      get: "/v1/items"
    };
  }
  rpc GetItem(GetItemRequest) returns (GetItemReply) {
    option (google.api.http) = {
      get: "/v1/item/id"
    };
  }
  rpc CreateItem(CreateOrUpdateItemRequest) returns (CreateOrUpdateItemReply) {
    option (google.api.http) = {
      post: "/v1/items"
      body: "*"
    };
  }
  rpc UpdateItem(CreateOrUpdateItemRequest) returns (CreateOrUpdateItemReply) {
    option (google.api.http) = {
      put: "/v1/item/{item.id}"
      body: "*"
    };
  }
}

enum ReviewStatus {
  NOT_REVIEW = 0;
  CHANGES_NEEDED = 1;
  APPROVED = 2;
}

/// Upload ------------------------------------------------
enum ImageBucket {
  STORE_LOGO = 0;
  STORE_BANNER = 1;
  ITEM_PICTURE = 2;
}

message UploadPhotoRequest {
  RequestProperties requestProperties = 1;
  ImageBucket bucket = 2;
}
message UploadPhotoReply {
  ReplyProperties replyProperties = 1;
  string uploadUrl = 2;
  uint64 imageId = 3;
}

message ImageMetaData {
  uint64 id = 1;
  string url = 2;
}

/// Store -------------------------------------------------
message Store {
  uint32 id = 1; // Will be ignored in create
  uint32 ownerId = 2;
  LocationId locationId = 3;
  string name = 4;
  string description = 5;
  string publicCellNumber = 6;
  string publicPhoneNumber = 7;
  ImageMetaData logo = 8;
  ImageMetaData banner = 9;
  ReviewStatus reviewStatus = 10; // Will be ignored in create and update
}

message GetMyStoreReply {
  ReplyProperties replyProperties = 1;
  Store store = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    STORE_NOT_FOUND = 1;
  }
  ErrorCode errorCode = 3;
}

message CreateOrUpdateStoreRequest {
  RequestProperties requestProperties = 1;
  Store store = 2;
}

message CreateOrUpdateStoreReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    INVALID_OWNER = 1;
    INVALID_LOCATION = 2;
    INVALID_NAME = 3;
    INVALID_DESC = 4;
    INVALID_PUBLIC_CELL_NUMBRT = 5;
    INVALID_PUBLIC_PHONE_NUMBRT = 6;
    INVALID_LOGO_IMAGE_ID = 7;
    INVALID_BANNER_IMAGE_ID = 8;
    ALREADY_CREATED = 9; // Only while creating
    STORE_NOT_FOUND = 10; // Only while updating
  }
  ErrorCode errorCode = 2;
}

/// Item --------------------------------------------------
message Item {
  uint64 id = 1; // Will be ignored in create
  uint32 ownerId = 2;
  uint32 storeId = 3;
  ArtCategoryId artCategoryId = 4;
  string name = 5;
  string description = 6;
  uint64 price = 7;
  repeated ImageMetaData images = 8;
  ReviewStatus reviewStatus = 9; // Will be ignored in create and update
}

message GetItemsReply {
  ReplyProperties replyProperties = 1;
  repeated Item items = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    STORE_NOT_FOUND = 1;
  }
  ErrorCode errorCode = 3;
}

message GetItemRequest {
  RequestProperties requestProperties = 1;
  uint64 id = 2;
}

message GetItemReply {
  ReplyProperties replyProperties = 1;
  Item items = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    ITEM_NOT_FOUND = 1;
    FORBIDDEN = 2;
  }
  ErrorCode errorCode = 3;
}

message CreateOrUpdateItemRequest {
  RequestProperties requestProperties = 1;
  Item item = 2;
}

message CreateOrUpdateItemReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    INVALID_OWNER = 1;
    INVALID_NAME = 2;
    INVALID_DESC = 3;
    INVALID_CATEGORY = 4;
    INVALID_PRICE = 5;
  }
  ErrorCode errorCode = 2;
}
