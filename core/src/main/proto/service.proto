syntax = "proto3";

option java_multiple_files = true;
option java_package = "net.honarnama";
option java_outer_classname = "HonarnamaProto";

package protobuf;

import "google/api/annotations.proto";

/// Commons /////////////////////////////////////////////////////////////////
message AndroidClientInfo {
  int32 sdkVersion = 1;
  string model = 2;
  string product = 3;
  string osBuild = 4;
  string hardware = 5;
  string device = 6;
  string mccMnc = 7;
  string locale = 8;
  string country = 9;
}

message RequestProperties {
  uint64 ifNotMatchEtag = 1;
  string userAuthToken = 2;
  string clientId = 3;
  int32 clientVersion = 4;
  AndroidClientInfo androidClientInfo = 5;
}

message ReplyProperties {
  enum StatusCode {
    OK = 0;
    NOT_MODIFIED = 1;
    CLIENT_ERROR = 2;
    SERVER_ERROR = 3;
    NOT_AUTHORIZED = 4;
    UPGRADE_REQUIRED = 5;
  }
  StatusCode statusCode = 1;
  uint32 maxAgeMinutes = 2;
  uint64 etag = 3;
  string serverVersion = 4;
  string errorMessage = 5;
  string newUserAuthToken = 6;
}

message SimpleRequest {
  RequestProperties requestProperties = 1;
}

enum RemoteFileActions {
  NOOP = 0;
  PUT = 1;
  DELETE = 2;
}

/// Meta --------------------------------------------------
message Location {
  uint32 id = 1;
  uint32 parentId = 2;
  string name = 3;
  uint32 order = 4;
  enum LocType {
    COUNTRY = 0;
    PROVINCE = 1;
    CITY = 2;
    NEIGHBORHOOD = 3;
  }
  LocType locType = 5;
}

message ArtCategory {
  uint32 id = 1;
  uint32 parentId = 2;
  string name = 3;
  uint32 order = 4;
  bool allSubCatFilterType = 5;
}

message EventCategory {
  uint32 id = 1;
  string name = 2;
  uint32 order = 3;
}

message LocationId {
  uint32 countryId = 1;
  uint32 provinceId = 2;
  uint32 cityId = 3;
  uint32 neighborhoodId = 4;
}

message ArtCategoryId {
  uint32 level1Id = 1;
  uint32 level2Id = 2;
}

/////////////////////////////////////////////////////////////////////////////
service MetaService {
  rpc Meta(SimpleRequest) returns (MetaReply) {
    option (google.api.http) = {
      get: "/v1/meta"
    };
  }
}

message MetaReply {
  ReplyProperties replyProperties = 1;
  repeated Location locations = 2;
  repeated int32 removedLocations = 3 [packed=true];
  repeated ArtCategory artCategories = 4;
  repeated int32 removedArtCategories = 5 [packed=true];
  repeated EventCategory eventCategories = 6;
  repeated int32 removedEventCategories = 7 [packed=true];
}

/////////////////////////////////////////////////////////////////////////////
service AuthService {
  rpc CreateAccount(CreateOrUpdateAccountRequest) returns (CreateAccountReply) {
    option (google.api.http) = {
      post: "/v1/accounts"
      body: "*"
    };
  }
  rpc UpdateAccount(CreateOrUpdateAccountRequest) returns (UpdateAccountReply) {
    option (google.api.http) = {
      put: "/v1/account/{account.id}"
      body: "*"
    };
  }
  rpc WhoAmI(SimpleRequest) returns (WhoAmIReply) {
    option (google.api.http) = {
      get: "/v1/whoami"
    };
  }
}

message Account {
  uint64 id = 1; // Will be ignored in create
  string name = 2;
  string email = 3;
  string mobileNumber = 4;
  enum Gender {
    FEMALE = 0;
    MALE = 1;
    UNSPECIFIED = 2;
  }
  Gender gender = 5;
  enum ActivationMethod {
    EMAIL = 0;
    TELEGRAM = 1;
  }
  ActivationMethod activationMethod = 6;
}

message WhoAmIReply {
  ReplyProperties replyProperties = 1;
  Account account = 2;
}

message CreateOrUpdateAccountRequest {
  RequestProperties requestProperties = 1;
  Account account = 2;
}

message CreateAccountReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    INVALID_EMAIL = 1;
    DUPLICATE_EMAIL = 2;
    INVALID_MOBILE_NUMBER = 3;
    DUPLICATE_MOBILE_NUMBER = 4;
    EMPTY_ACCOUNT = 5;
  }
  ErrorCode errorCode = 2;
  string telegramActivationCode = 3;
}

message UpdateAccountReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    ACCOUNT_NOT_FOUND = 1;
    FORBIDDEN = 2;
    EMPTY_ACCOUNT = 3;
  }
  ErrorCode errorCode = 2;
}

/////////////////////////////////////////////////////////////////////////////
service SellService {

  rpc GetMyStore(SimpleRequest) returns (GetStoreReply) {
    option (google.api.http) = {
      get: "/v1/my-store"
    };
  }
  rpc CreateStore(CreateOrUpdateStoreRequest) returns (CreateOrUpdateStoreReply) {
    option (google.api.http) = {
      post: "/v1/my-store"
      body: "*"
    };
  }
  rpc UpdateStore(CreateOrUpdateStoreRequest) returns (CreateOrUpdateStoreReply) {
    option (google.api.http) = {
      put: "/v1/my-store"
      body: "*"
    };
  }

  rpc GetItems(SimpleRequest) returns (GetItemsReply) {
    option (google.api.http) = {
      get: "/v1/items"
    };
  }
  rpc GetItem(GetOrDeleteItemRequest) returns (GetItemReply) {
    option (google.api.http) = {
      get: "/v1/item/{id}"
    };
  }
  rpc CreateItem(CreateOrUpdateItemRequest) returns (CreateOrUpdateItemReply) {
    option (google.api.http) = {
      post: "/v1/items"
      body: "*"
    };
  }
  rpc UpdateItem(CreateOrUpdateItemRequest) returns (CreateOrUpdateItemReply) {
    option (google.api.http) = {
      put: "/v1/item/{item.id}"
      body: "*"
    };
  }
  rpc DeleteItem(GetOrDeleteItemRequest) returns (DeleteItemReply) {
    option (google.api.http) = {
      delete: "/v1/item/{id}"
    };
  }

  rpc GetMyEvent(SimpleRequest) returns (GetEventReply) {
    option (google.api.http) = {
      get: "/v1/my-event"
    };
  }
  rpc CreateEvent(CreateOrUpdateEventRequest) returns (CreateOrUpdateEventReply) {
    option (google.api.http) = {
      post: "/v1/my-event"
      body: "*"
    };
  }
  rpc UpdateEvent(CreateOrUpdateEventRequest) returns (CreateOrUpdateEventReply) {
    option (google.api.http) = {
      put: "/v1/my-event"
      body: "*"
    };
  }
}

enum ReviewStatus {
  NOT_REVIEWED = 0;
  CHANGES_NEEDED = 1;
  APPROVED = 2;
}

/// Store -------------------------------------------------
message Store {
  uint64 id = 1; // Just for gets
  uint64 ownerId = 2; // Will be ignored in update
  LocationId locationId = 3;
  string name = 4;
  string description = 5;
  string publicCellNumber = 6;
  string publicPhoneNumber = 7;
  string logo = 8; // Just for gets
  string banner = 9; // Just for gets
  ReviewStatus reviewStatus = 10; // Will be ignored in create and update
}

message GetStoreReply {
  ReplyProperties replyProperties = 1;
  Store store = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    STORE_NOT_FOUND = 1;
  }
  ErrorCode errorCode = 3;
}

message CreateOrUpdateStoreRequest {
  RequestProperties requestProperties = 1;
  Store store = 2;
  RemoteFileActions changingLogo = 3;
  RemoteFileActions changingBanner = 4;
}

message CreateOrUpdateStoreReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    DUPLICATE_NAME = 2;
    STORE_NOT_FOUND = 3; // Only while updating
    EMPTY_STORE = 4; // Only while updating
  }
  ErrorCode errorCode = 2;
  Store uptodateStore = 3;
  string logoModificationUrl = 4;
  string bannerModificationUrl = 5;
}

/// Item --------------------------------------------------
message Item {
  uint64 id = 1; // Will be ignored in create
  uint64 ownerId = 2; // Will be ignored in update
  uint64 storeId = 3; // Just for gets
  ArtCategoryId artCategoryId = 4;
  string name = 5;
  string description = 6;
  uint64 price = 7;
  repeated string images = 8; // Just for gets
  ReviewStatus reviewStatus = 9; // Will be ignored in create and update
}

message GetItemsReply {
  ReplyProperties replyProperties = 1;
  repeated Item items = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    STORE_NOT_FOUND = 1;
  }
  ErrorCode errorCode = 3;
}

message GetOrDeleteItemRequest {
  RequestProperties requestProperties = 1;
  uint64 id = 2;
}

message GetItemReply {
  ReplyProperties replyProperties = 1;
  Item item = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    ITEM_NOT_FOUND = 1;
    FORBIDDEN = 2;
  }
  ErrorCode errorCode = 3;
}

message CreateOrUpdateItemRequest {
  RequestProperties requestProperties = 1;
  Item item = 2;
  repeated RemoteFileActions changingImage = 3;
}

message CreateOrUpdateItemReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    FORBIDDEN = 1;
    ITEM_NOT_FOUND = 2; // Only while updating
    EMPTY_ITEM = 3; // Only while updating
    STORE_NOT_CREATED = 4;
    // INVALID_NAME = 5;
    // INVALID_DESC = 6;
    // INVALID_CATEGORY = 7;
    // INVALID_PRICE = 8;
  }
  ErrorCode errorCode = 2;
  Item uptodateItem = 3;
  repeated string imageModificationUrl = 4;
}

message DeleteItemReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    ITEM_NOT_FOUND = 1;
    FORBIDDEN = 2;
  }
  ErrorCode errorCode = 2;
}

/// Event --------------------------------------------------
message Event {
  uint64 id = 1; // Will be ignored in create
  uint64 ownerId = 2; // Will be ignored in update
  uint64 storeId = 3; // Just for gets
  uint32 eventCategoryId = 4;
  string name = 5;
  string description = 6;
  bool active = 7;
  LocationId locationId = 8;
  string address = 9;
  // Represents seconds of UTC time since Unix epoch
  int64 startAt = 10;
  int64 endAt = 11;
  string cellNumber = 12;
  string phoneNumber = 13;
  string banner = 14; // Just for gets
  ReviewStatus reviewStatus = 15; // Will be ignored in create and update
}

message GetEventReply {
  ReplyProperties replyProperties = 1;
  Event event = 2;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    EVENT_NOT_FOUND = 1;
  }
  ErrorCode errorCode = 3;
}

message CreateOrUpdateEventRequest {
  RequestProperties requestProperties = 1;
  Event event = 2;
  RemoteFileActions changingBanner = 3;
}

message CreateOrUpdateEventReply {
  ReplyProperties replyProperties = 1;
  enum ErrorCode {
    NO_CLIENT_ERROR = 0;
    STORE_NOT_CREATED = 3; // Only while creating
    EVENT_NOT_FOUND = 4; // Only while updating
    EMPTY_EVENT = 5; // Only while updating
  }
  ErrorCode errorCode = 2;
  Event uptodateEvent = 3;
  string bannerModificationUrl = 4;
}
